#
# List of random integers (1 - 49) generating function (q1a.py)
#
# Purpose: The program has a function genRanList(N) that can generate and return a list of random integers 
# ranging from 1 - 49 with the size of N, where N is an integer greater than zero. 
# This function asserts that the parameter N is an integer greater than zero and can return the list correctly 
# when the assertion is correct. Otherwise, it returns an error message.
#
# Limitation: This function generates a list of integers ranging from 1 to 49 only. The numbers are hard-coded and
# the user have to change the configuration when he/she wants a list of integers with different ranges.
# There is no input validation of the data type of parameter N. Instead, we assume that N is always an integer.
# The integers are drawn by random and with replacement, i.e. The same integer can appear more than once. 
# However, in real life, people may expect a list of non-repeating integers generated by random, 
# e.g. lottery/decision making. 
#  
# Written by CHAN CHI HUNG (s12650050)
# On 13/03/2022
# For COMP S258 Assignment 3
#

# import random module for built-in random functions
import random

# Define a function genRanList(N) to generate a list of integers (1- 49) by random
def genRanList(N):
    try:
        # assert parameter N > 0 or catch AssertionError
        assert N > 0
        
        # Create a list of integer from 1 - 49 (inclusive)
        list_set = list(range(1, 50))        
        #print(list_set)
        
        # Using random.choices(list_set, k = N) can generate the list at once
        # i.e, return random.choices(list_set, k = N)
        # However, it seems too easy to work it in Python and in terms of assignment,
        # I decided to work with traditional way.
        
        # Create an empty list for output
        output = []
               
        # Generate a list of integers with size N randomly with for-loop
        # This question assumes that N is always an integer and we assert N > 0 as well
        # It makes sure N is a positive integer
        for i in range (0, N):
            
            # This question does not specific whether repeating integers in the list are allowed or not
            # Draw an integer from the list_set with replacement, i.e. re-appearnce of an integer is acceptable
            draw_number = random.choice(list_set)
            
            # Append the drawn integer to the output list.
            output.append(draw_number)
        
        # Return the final list
        return output
    
    # When the parameter in N is not as asserted, i.e. < = 0, AssertionError exists and is caught.
    except AssertionError:
        
        # From skeleton file, I found that the program uses print() to show result and check AssertionError
        # return a string of error message can be shown using print(), Therefore I use it.
        error_message = 'Error: parameter N must be greater than 0.'
        return error_message
    
    # From the Internet, I found that it is also okay and more convenient
    # assert <condition>,<error message>
    # i.e. assert N > 0, 'Error: parameter N must be greater than 0.'
            
#print(genRanList(-1)) # Test N > 0 Assert
#print(genRanList(0)) # Test N > 0 Assert
print(genRanList(10))
  
   